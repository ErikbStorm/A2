176 - 0.7*74
124.2 + 0.7*86
knitr::opts_chunk$set(echo = TRUE)
packages <- c("rms")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())), repos='http://cran.us.r-project.org')
}
library(rms) #needed for lrm()
# create the variables
status <- c(rep("upper", 36), rep("middle", 94), rep("lower", 54))
outcome <- c(rep("r", 30), rep("schwa", 6), rep("r", 20), rep("schwa", 74), rep("r", 4), rep("schwa", 50))
# create the data frame
ny.data <- data.frame(outcome, status)
table(ny.data) # this should show the same table as the one in slide 7
status <- relevel(status, ref = 'lower')
status <- as.factor(status)
outcome <- as.factor(outcome)
str(ny.data)
status <- relevel(status, ref = 'lower')
outcome <- relevel(outcome, ref = 'schwa')
str(ny.data)
status <- as.factor(status)
outcome <- as.factor(outcome)
str(ny.data)
status <- relevel(status, ref = 'lower')
outcome <- relevel(outcome, ref = 'schwa')
str(ny.data)
View(ny.data)
status <- relevel(status, ref = 'lower')
outcome <- relevel(outcome, ref = 'schwa')
str(ny.data)
lrm_model <- lrm(outcome ~ status, data = ny.data)
lrm_model
4/54
1 - plogis(2.5257)
lrm_model
validate(lrm_model, B = 200)
lrm_model
status <- relevel(status, ref = 'lower')
outcome <- relevel(outcome, ref = 'schwa')
str(ny.data)
status <- relevel(status, ref = 'lower')
outcome <- relevel(outcome, ref = 'schwa')
str(status)
status <- relevel(status, ref = 'lower')
outcome <- relevel(outcome, ref = 'schwa')
str(status)
status <- as.factor(status)
outcome <- as.factor(outcome)
is.factor(status)
status <- as.factor(status)
outcome <- as.factor(outcome)
is.factor(status)
is.factor(outcome)
knitr::opts_chunk$set(echo = TRUE)
packages <- c("jtools", "lme4", "visreg")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())), repos='http://cran.us.r-project.org')
}
library(jtools)
library(lme4)
library(visreg)
df <- read.csv("lab6_temperature.csv")
str(df)
df$Coastal <- as.factor(df$Coastal)
str(df)
df$Coastal <- relevel(df$Coastal, ref="0")
df$Year <- as.factor(df$Year)
str(df)
df$Year <- as.factor(df$Year)
str(df)
df$temp_res <- (df$Temperature - mean(df$Temperature)) / 1000
df$temp_res
df <- read.csv("lab6_temperature.csv")
str(df)
df$Coastal <- as.factor(df$Coastal)
str(df)
df$Coastal <- relevel(df$Coastal, ref="0")
df$Year <- as.factor(df$Year)
str(df)
df <- read.csv("lab6_temperature.csv")
str(df)
df$Coastal <- as.factor(df$Coastal)
str(df)
df$Coastal <- relevel(df$Coastal, ref="0")
df$Year <- as.factor(df$Year)
str(df)
df <- read.csv("lab6_temperature.csv")
str(df)
df$Coastal <- as.factor(df$Coastal)
str(df)
df$Coastal <- relevel(df$Coastal, ref="0")
df$Year <- as.factor(df$Year)
str(df)
df$lat_res <- (df$Latitude - mean(df$Latitude)) / 1000
df$long_res <- (df$Longitude - mean(df$Longitude)) / 1000
df$lat_res
df$long_res
df$lat_res <- (df$Latitude - mean(df$Latitude)) / 1000
df$long_res <- (df$Longitude - mean(df$Longitude)) / 1000
head(df)
par(mfrow=c(1,2))
qqplot(Temperature ~ City,data=df)
par(mfrow=c(1,2))
qqplot(x = Temperature, y = City,data=df)
par(mfrow=c(1,2))
qqplot(x = df$Temperature, y = df$City)
par(mfrow=c(1,2))
qqplot(x = df$City, y = df$Temperature)
par(mfrow=c(1,2))
qqplot(x = df$City, y = df$Temperature)
qqline()
par(mfrow=c(1,2))
qqplot(x = df$City, y = df$Temperature)
abline()
par(mfrow=c(1,2))
qqplot(x = df$City, y = df$Temperature)
qqline(df$city, df$Temperature)
par(mfrow=c(1,2))
boxplot(Temperature ~ City,data= df)
par(mfrow=c(1,2))
boxplot(Temperature ~ City,data= df)
boxplot(Temperature ~ Year,data= df)
df$lat_res <- (df$Latitude - mean(df$Latitude))
df$long_res <- (df$Longitude - mean(df$Longitude))
df$elev_res <- (df$Elevation - mean(df$Elevation)) / 1000
head(df)
df$lat_res <- c(scale(df$Latitude))
df$long_res <- c(scale(df$Longitude))
df$elev_res <- (df$Elevation - mean(df$Elevation)) / 1000
head(df)
df$lat_res <- c(scale(df$Latitude))
df$long_res <- c(scale(df$Longitude))
df$elev_res <- c(scale(df$Elevation)) / 1000
head(df)
lmer_m <- lmer(Temperature ~ lat_res + long_res + Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m
lmer_m <- lmer(Temperature ~ lat_res + long_res + Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m$coefficients
lmer_m <- lmer(Temperature ~ lat_res + long_res + Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
summary(lmer_m)$coefficients
df$lat_res <- c(scale(df$Latitude))
df$long_res <- c(scale(df$Longitude))
df$elev_res <- df$Elevation / 1000
head(df)
lmer_m <- lmer(Temperature ~ lat_res + long_res + Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
summary(lmer_m)$coefficients
df$lat_res <- c(scale(df$Latitude))
df$long_res <- c(scale(df$Longitude))
df$elev_res <- c(scale(df$Elevation)) / 1000
head(df)
lmer_m <- lmer(Temperature ~ lat_res + long_res + Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
summary(lmer_m)$coefficients
lmer_m1 <- lmer(Temperature ~ lat_res + long_res + Coastal * elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m2 <- lmer(Temperature ~ lat_res + long_res * Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m3 <- lmer(Temperature ~ long_res + lat_res * Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m4 <- lmer(Temperature ~ long_res + lat_res * elev_res + Coastal + (1|City) + (1|Year),df, REML=F)
lmer_m5 <- lmer(Temperature ~ long_res * elev_res + lat_res + Coastal + (1|City) + (1|Year),df, REML=F)
AIC(lmer_m) - AIC(lmer_m1)
lmer_m1 <- lmer(Temperature ~ lat_res + long_res + Coastal * elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m2 <- lmer(Temperature ~ lat_res + long_res * Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m3 <- lmer(Temperature ~ long_res + lat_res * Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m4 <- lmer(Temperature ~ long_res + lat_res * elev_res + Coastal + (1|City) + (1|Year),df, REML=F)
lmer_m5 <- lmer(Temperature ~ long_res * elev_res + lat_res + Coastal + (1|City) + (1|Year),df, REML=F)
AIC(lmer_m2) - AIC(lmer_m1)
lmer_m1 <- lmer(Temperature ~ lat_res + long_res + Coastal + elev_res + (1|City) + (1|Year) + Coastal * elev_res,df, REML=F)
lmer_m2 <- lmer(Temperature ~ lat_res + long_res * Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m3 <- lmer(Temperature ~ long_res + lat_res * Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m4 <- lmer(Temperature ~ long_res + lat_res * elev_res + Coastal + (1|City) + (1|Year),df, REML=F)
lmer_m5 <- lmer(Temperature ~ long_res * elev_res + lat_res + Coastal + (1|City) + (1|Year),df, REML=F)
AIC(lmer_m2) - AIC(lmer_m1)
lmer_m1 <- lmer(Temperature ~ lat_res + long_res + Coastal + elev_res + (1|City) + (1|Year) + Coastal * elev_res,df, REML=F)
lmer_m2 <- lmer(Temperature ~ lat_res + long_res + Coastal + elev_res + (1|City) + (1|Year + long_res * Coastal),df, REML=F)
lmer_m1 <- lmer(Temperature ~ lat_res + long_res + Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m2 <- lmer(Temperature ~ lat_res + long_res * Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m3 <- lmer(Temperature ~ long_res + lat_res * Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m4 <- lmer(Temperature ~ long_res + lat_res * elev_res + Coastal + (1|City) + (1|Year),df, REML=F)
lmer_m5 <- lmer(Temperature ~ long_res * elev_res + lat_res + Coastal + (1|City) + (1|Year),df, REML=F)
AIC(lmer_m2) - AIC(lmer_m1)
lmer_m1 <- lmer(Temperature ~ lat_res + long_res + Coastal * elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m2 <- lmer(Temperature ~ lat_res + long_res * Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m3 <- lmer(Temperature ~ long_res + lat_res * Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m4 <- lmer(Temperature ~ long_res + lat_res * elev_res + Coastal + (1|City) + (1|Year),df, REML=F)
lmer_m5 <- lmer(Temperature ~ long_res * elev_res + lat_res + Coastal + (1|City) + (1|Year),df, REML=F)
AIC(lmer_m2) - AIC(lmer_m1)
lmer_m1 <- lmer(Temperature ~ lat_res + long_res + Coastal * elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m2 <- lmer(Temperature ~ lat_res + long_res * Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m3 <- lmer(Temperature ~ long_res + lat_res * Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m4 <- lmer(Temperature ~ long_res + lat_res * elev_res + Coastal + (1|City) + (1|Year),df, REML=F)
lmer_m5 <- lmer(Temperature ~ long_res * elev_res + lat_res + Coastal + (1|City) + (1|Year),df, REML=F)
AIC(lmer_m2) - AIC(lmer_m3)
lmer_m1 <- lmer(Temperature ~ lat_res + long_res + Coastal * elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m2 <- lmer(Temperature ~ lat_res + long_res * Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m3 <- lmer(Temperature ~ long_res + lat_res * Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m4 <- lmer(Temperature ~ long_res + lat_res * elev_res + Coastal + (1|City) + (1|Year),df, REML=F)
lmer_m5 <- lmer(Temperature ~ long_res * elev_res + lat_res + Coastal + (1|City) + (1|Year),df, REML=F)
AIC(lmer_m1) - AIC(lmer_m3)
lmer_m1 <- lmer(Temperature ~ lat_res + long_res + Coastal * elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m2 <- lmer(Temperature ~ lat_res + long_res * Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m3 <- lmer(Temperature ~ long_res + lat_res * Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
lmer_m4 <- lmer(Temperature ~ long_res + lat_res * elev_res + Coastal + (1|City) + (1|Year),df, REML=F)
lmer_m5 <- lmer(Temperature ~ long_res * elev_res + lat_res + Coastal + (1|City) + (1|Year),df, REML=F)
AIC(lmer_m1) - AIC(lmer_m4)
lmer_m1 <- lmer(Temperature ~ Coastal * elev_res, df, REML=F)
knitr::opts_chunk$set(echo = TRUE)
packages <- c("jtools", "lme4", "visreg")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())), repos='http://cran.us.r-project.org')
}
library(jtools)
library(lme4)
library(visreg)
knitr::opts_chunk$set(echo = TRUE)
packages <- c("jtools", "lme4", "visreg")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())), repos='http://cran.us.r-project.org')
}
library(jtools)
library(lme4)
library(visreg)
df <- read.csv("lab6_temperature.csv")
str(df)
df$Coastal <- as.factor(df$Coastal)
str(df)
df$Coastal <- relevel(df$Coastal, ref="0")
df$Year <- as.factor(df$Year)
str(df)
df$lat_res <- c(scale(df$Latitude))
df$long_res <- c(scale(df$Longitude))
df$elev_res <- c(scale(df$Elevation)) / 1000
head(df)
par(mfrow=c(1,2))
boxplot(Temperature ~ City,data= df)
boxplot(Temperature ~ Year,data= df)
lmer_m <- lmer(Temperature ~ lat_res + long_res + Coastal + elev_res + (1|City) + (1|Year),df, REML=F)
summary(lmer_m)$coefficients
lmer_m1 <- lmer(Temperature ~ Coastal * elev_res + Coastal * lat_res + Coastal * long_res + elev_res * lat_res + elev_res * long_res + long_res + lat_res + (1|City) + (1|Year), df, REML = F)
AIC(lmer_m) - AIC(lmer_m1)
lmer_m1 <- lmer(Temperature ~ Coastal * elev_res + Coastal * lat_res + Coastal * long_res + elev_res * lat_res + elev_res * long_res + long_res + lat_res + (1|City) + (1|Year), df, REML = F)
summary(lmer_m1)$coefficients
AIC(lmer_m) - AIC(lmer_m1)
lmer_m1 <- lmer(Temperature ~ Coastal * elev_res + Coastal * lat_res + Coastal * long_res + elev_res * lat_res + elev_res * long_res + long_res + lat_res + (1|City) + (1|Year), df, REML = F)
summary(lmer_m1)$coefficients
AIC(lmer_m) - AIC(lmer_m1)
lmer_m1 <- lmer(Temperature ~ Coastal * elev_res + Coastal * lat_res + Coastal * long_res + elev_res * long_res + long_res + lat_res + (1|City) + (1|Year), df, REML = F)
AIC(lmer_m) - AIC(lmer_m1)
lmer_m1 <- lmer(Temperature ~ Coastal * elev_res + Coastal * lat_res + Coastal * long_res + elev_res * lat_res + elev_res * long_res + long_res + lat_res + (1|City) + (1|Year), df, REML = F)
summary(lmer_m1)$coefficients
AIC(lmer_m) - AIC(lmer_m1)
lmer_m1_improved <- lmer(Temperature ~ Coastal * elev_res + Coastal * lat_res + Coastal * long_res + elev_res * long_res + long_res + lat_res + (1|City) + (1|Year), df, REML = F)
AIC(lmer_m1) - AIC(lmer_m1_improved)
lmer_m1 <- lmer(Temperature ~ Coastal * elev_res + Coastal * lat_res + Coastal * long_res + elev_res * lat_res + elev_res * long_res + long_res + lat_res + (1|City) + (1|Year), df, REML = F)
summary(lmer_m1)$coefficients
AIC(lmer_m) - AIC(lmer_m1)
lmer_m1_improved <- lmer(Temperature ~ Coastal * elev_res + Coastal * lat_res + Coastal * long_res + elev_res * long_res + long_res + (1|City) + (1|Year), df, REML = F)
AIC(lmer_m1) - AIC(lmer_m1_improved)
interact_plot(lmer_m1, pred="lat_res", modx="Coastal")
knitr::opts_chunk$set(echo = TRUE)
packages <- c("jtools", "lme4", "visreg")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())), repos='http://cran.us.r-project.org')
}
library(jtools)
library(lme4)
library(visreg)
interact_plot(lmer_m1, pred="lat_res", modx="Coastal")
library(interactions)
interact_plot(lmer_m1, pred="lat_res", modx="Coastal")
library(interactions)
interact_plot(lmer_m1_improved, pred="lat_res", modx="Coastal")
interact_plot(lmer_m1, pred="elev_res", modx="Coastal")
library(interactions)
interact_plot(lmer_m1, pred="lat_res", modx="Coastal")
interact_plot(lmer_m1, pred="elev_res", modx="Coastal")
plot(fitted(lmer_m1, resid(lmer_m1)))
plot(fitted(lmer_m1), resid(lmer_m1))
plot(fitted(lmer_m1), resid(lmer_m1))
qqplot(resid(lmer_m1))
plot(fitted(lmer_m1), resid(lmer_m1))
qqp(resid(lmer_m1))
plot(fitted(lmer_m1), resid(lmer_m1))
plot(resid(lmer_m1))
plot(fitted(lmer_m1), resid(lmer_m1))
qqplot(resid(lmer_m1))
#remove outliers
df_no = df[abs(scale(resid(lmer1))) < 2,]
#remove outliers
df_no = df[abs(scale(resid(lmer_m1))) < 2,]
#number removed
dim(df_no) - dim(df)
#percentage removed
1 - (dim(df_no) / dim(df))
lmer_no = lmer(Temperature ~ Coastal + lat_res + long_res + elev_res + (1|City) + (1|Year), df_no, REML = F)
summary(lmer_no)
#remove outliers
df_no = df[abs(scale(resid(lmer_m1))) < 2,]
#number removed
dim(df_no) - dim(df)
#percentage removed
(1 - (dim(df_no) / dim(df))) * 100
lmer_no = lmer(Temperature ~ Coastal + lat_res + long_res + elev_res + (1|City) + (1|Year), df_no, REML = F)
summary(lmer_no)
#remove outliers
df_no = df[abs(scale(resid(lmer_m1))) < 2,]
#number removed
dim(df_no) - dim(df)
#percentage removed
(1 - (dim(df_no) / dim(df))) * 100 #0.23%
lmer_no = lmer(Temperature ~ Coastal + lat_res + long_res + elev_res + (1|City) + (1|Year), df_no, REML = F)
summary(lmer_no)
AIC(lmer_m1) - AIC(lmer_no)
plot(fitted(lmer_m1), resid(lmer_m1))
plot(fitted(lmer_m1), resid(lmer_m1))
cor(df$lat_res, df$long_res)
cor(df$lat_res, df$elev_res)
cor(df$long_res, df$elev_res)
df
str(df)
df
str(df)
str(df)
str(def)
def <- read.csv("dataset.csv", sep=";");
def <- read.csv2("dataset.csv", sep=";");
setwd("~/")
setwd("C:\School\Social Media\Assignment 2")
setwd("\School\Social Media\Assignment 2")
setwd("School\Social Media\Assignment 2")
setwd("C:/School/Social Media/Assignment 2")
def <- read.csv("dataset.csv", sep=";");
str(def);
lmer <- lmer(Duration ~ TURNTYPE, (), data=def);
lmer <- lmer(Duration ~ TURNTYPE + (1|dyadid), data=def);
library(jtools)
library(lme4)
library(visreg)
lmer <- lmer(Duration ~ TURNTYPE + (1|dyadid), data=def);
df <- data.frame(c("WYSIWYG", "TBT"), c(6.9, 7.3))
barplot(df, xlab='', ylab='average chars per line')
counts <- table(df)
barplot(df, xlab='', ylab='average chars per line')
str(df)
counts
barplot(counts, xlab='', ylab='average chars per line')
barplot(c(6.9, 7.3), xlab='', ylab='average chars per line')
barplot(c(6.9, 7.3), xlab='', ylab='average chars per line', names.arg = c("WYSIWYG", "TBT"))
barplot(c(6.9, 7.3), ylab='average chars per line', names.arg = c("WYSIWYG", "TBT"), col = c("Blue", "lightblue"))
barplot(c(6.9, 7.3), ylab='average chars per line', names.arg = c("WYSIWYG", "TBT"), col = c("green", "lightblue"))
barplot(c(6.9, 7.3), ylab='average chars per line', names.arg = c("WYSIWYG", "TBT"), col = c("darkblue", "lightblue"))
barplot(c(6.9, 7.3), ylab='average chars per line', names.arg = c("WYSIWYG", "TBT"), col = c("darkblue", "lightblue"), height=10)
barplot(c(6.9, 7.3), ylab='average chars per line', names.arg = c("WYSIWYG", "TBT"), col = c("darkblue", "lightblue"), ylim=10)
barplot(c(6.9, 7.3), ylab='average chars per line', names.arg = c("WYSIWYG", "TBT"), col = c("darkblue", "lightblue"), ylim = c(10))
barplot(c(6.9, 7.3), ylab='average chars per line', names.arg = c("WYSIWYG", "TBT"), col = c("darkblue", "lightblue"), ylim = 10)
barplot(c(6.9, 7.3), ylab='average chars per line', names.arg = c("WYSIWYG", "TBT"), col = c("darkblue", "lightblue"), ylim = c(10,20))
barplot(c(6.9, 7.3), ylab='average chars per line', names.arg = c("WYSIWYG", "TBT"), col = c("darkblue", "lightblue"), ylim = c(0,10))
barplot(c(6.9, 7.3), main="Data Usage of Interfaces", ylab='average chars per line', names.arg = c("WYSIWYG", "TBT"), col = c("darkblue", "lightblue"), ylim = c(0,10))
barplot(c(0.016, 0.032), main="Happiness per Interface", ylab='', names.arg = c("WYSIWYG", "TBT"), col = c("darkblue", "lightblue"), ylim = c(0,1))
barplot(c(0.016, 0.032), main="Happiness per Interface", ylab='', names.arg = c("WYSIWYG", "TBT"), col = c("darkblue", "lightblue"), ylim = c(0,0.1))
barplot(c(0.016, 0.032), main="Happiness per Interface", ylab='', names.arg = c("WYSIWYG", "TBT"), col = c("darkblue", "lightblue"), ylim = c(0,0.05))
barplot(c(0.016, 0.032), main="Happiness per Interface", ylab='', names.arg = c("WYSIWYG", "TBT"), col = c("darkblue", "lightblue"), ylim = c(0,0.04))
#Emotional change per line
barplot(c(0.04, 0.0765), main="Emotional Change per Interface", ylab='Emotional change per line', names.arg = c("WYSIWYG", "TBT"), col = c("darkblue", "lightblue"), ylim = c(0,0.1))
#time
barplot(c(1816, 4816), main="Average time per interface", ylab='Average time per game', names.arg = c("WYSIWYG", "TBT"), col = c("darkblue", "lightblue"), ylim = c(0,5000))
#messages per turn
barplot(c(1.02, 1.232), main="Average m/t per interface", ylab='Average messages per turn', names.arg = c("WYSIWYG", "TBT"), col = c("darkblue", "lightblue"), ylim = c(0,1.5))
#overlap
barplot(c(8.68, 19.86), main="Overlap of words per interface", ylab='Percentage of Word overlap between turns.', names.arg = c("WYSIWYG", "TBT"), col = c("darkblue", "lightblue"), ylim = c(0,20))
#time
barplot(c(1816, 4816), main="Average time per interface", ylab='Average time for a message in ms', names.arg = c("WYSIWYG", "TBT"), col = c("darkblue", "lightblue"), ylim = c(0,5000))
#messages per turn
barplot(c(1.02, 1.232), main="Average m/t per interface", ylab='Average messages per turn', names.arg = c("WYSIWYG", "TBT"), col = c("darkblue", "lightblue"), ylim = c(0,1.5))
#overlap
barplot(c(8.68, 19.86), main="Overlap of words per interface", ylab='Percentage of Word overlap between turns.', names.arg = c("WYSIWYG", "TBT"), col = c("darkblue", "lightblue"), ylim = c(0,20))
#time
barplot(c(130, 527), main="Average gametime per interface", ylab='Average time of a game in seconds', names.arg = c("WYSIWYG", "TBT"), col = c("darkblue", "lightblue"), ylim = c(0,550))
data <- read.csv("lengths.csv")
plot(data)
data <- read.csv("lengths.csv", delimiter=";")
data <- read.csv("lengths.csv", sep=";")
wt <- data[data$experiment_type == 'WYSIWYGTBT']
str(data)
wt <- data[data$experiment_type == 'WYSIWYGTBT']
wt <- data[data$experiment_type == 'WYSIWYGTBT', ]
plot(wt)
wt <- data[ ,data$experiment_type == 'WYSIWYGTBT']
wt <- data[data$experiment_type == 'WYSIWYGTBT', ]
head(wt)
plot(wt$game_length)
plot(wt$gameid, wt$game_length)
wt <- data[data$experiment_type == 'TBTWYSIWYG', ]
head(wt)
plot(wt$gameid, wt$game_length)
wt <- data[data$experiment_type == 'TBTWYSIWYG' & data$game_length < 2000000, ]
head(wt)
plot(wt$gameid, wt$game_length)
wt <- data[data$experiment_type == 'TBTWYSIWYG' & data$game_length < 1000000, ]
head(wt)
plot(wt$gameid, wt$game_length)
wt <- data[data$experiment_type == 'TBTWYSIWYG' & data$game_length < 400000, ]
head(wt)
plot(wt$gameid, wt$game_length)
wt <- data[data$experiment_type == 'TBTWYSIWYG' & data$game_length < 400000 & data$Interface_used == "TBT", ]
head(wt)
plot(wt$gameid, wt$game_length)
wt <- data[data$experiment_type == 'TBTWYSIWYG' & data$game_length < 500000 & data$Interface_used == "TBT", ]
head(wt)
plot(wt$gameid, wt$game_length)
wt <- data[data$experiment_type == 'TBTWYSIWYG' & data$game_length < 500000 & data$Interface_used == "WYSIWYG", ]
head(wt)
plot(wt$gameid, wt$game_length)
barplot(data$game_length ~ data$Interface_used)
tabl <- table(data)
tabl
aggregate(data$game_length, by=list(data$Interface_used), FUN=average)
aggregate(data$game_length, by=list(data$Interface_used), FUN=mean)
aggregate(data$game_length, by=list(data$Interface_used, data$experiment_type), FUN=mean)
barplot(nice)
nice <- aggregate(data$game_length, by=list(data$Interface_used, data$experiment_type), FUN=mean)
barplot(nice)
barplot(nice$x)
str(data)
plot(data$gameid, data$game_length)
data2 <- data[data$game_length < 500000]
data2 <- data[data$game_length < 500000, ]
nice <- aggregate(data$game_length, by=list(data$Interface_used, data$experiment_type), FUN=mean)
barplot(nice$x)
nice
nice <- aggregate(data$game_length, by=list(data$experiment_type, data$Interface_used), FUN=mean)
nice
barplot(nice$x)
data <- data[data$game_length < 500000, ]
nice <- aggregate(data$game_length, by=list(data$experiment_type, data$Interface_used), FUN=mean)
nice
barplot(nice$x)
data <- read.csv("lengths.csv", sep=";")
data <- data[data$game_length < 1000000, ]
nice <- aggregate(data$game_length, by=list(data$experiment_type, data$Interface_used), FUN=mean)
nice
barplot(nice$x)
barplot(nice$x, names.arg = nice$Group.1)
barplot(nice$x, names.arg = c(nice$Group.1, nice$Group.2))
barplot(nice$x, names.arg = c(nice$Group.1, "hoi"))
barplot(nice$x, names.arg = c(nice$Group.1))
barplot(nice$x, names.arg = nice$Group.1)
barplot(nice$x, names.arg = nice$Group.2)
nice <- aggregate(data$game_length, by=list(data$Interface_used, data$experiment_type), FUN=mean)
nice
barplot(nice$x, names.arg = nice$Group.2)
barplot(nice$x, names.arg = nice$Group.1)
barplot(nice$x, names.arg = nice$Group.1, legend=nice$Group.2)
barplot(nice$x, names.arg = nice$Group.1, legend=c("TBTWYSIWYG", "WYSIWYGTBT"))
barplot(nice$x, names.arg = nice$Group.1, legend=c("TBTWYSIWYG", "WYSIWYGTBT"), fill=c("red","blue"))
barplot(nice$x, names.arg = nice$Group.1)
legend("topright", c("TBTWYSIWYG", "WYSIWYGTBT"), fill=c("red","blue"))
legend("topright", c("TBTWYSIWYG", "WYSIWYGTBT"), fill=c("red","blue"))
barplot(nice$x, names.arg = nice$Group.1, col = c("red", "red", "blue", "blue"))
legend("topright", c("TBTWYSIWYG", "WYSIWYGTBT"), fill=c("red","blue"))
barplot(nice$x, names.arg = nice$Group.1, col = c("red", "cyan", "blue", "blue"))
barplot(nice$x, names.arg = nice$Group.1, col = c("red", "cyan", "lightblue", "blue"))
barplot(nice$x, names.arg = nice$Group.1, col = c("red", "cyan", "darkblue", "blue"))
barplot(nice$x, names.arg = nice$Group.1, col = c("lightblue", "lightblue", "darkblue", "darkblue"))
legend("topright", c("TBTWYSIWYG", "WYSIWYGTBT"), fill=c("lightblue","darkblue"))
legend("topleft", c("TBTWYSIWYG", "WYSIWYGTBT"), fill=c("lightblue","darkblue"))
barplot(nice$x, names.arg = nice$Group.1, col = c("lightblue", "lightblue", "darkblue", "darkblue"))
legend("topleft", c("TBTWYSIWYG", "WYSIWYGTBT"), fill=c("lightblue","darkblue"))
legend("topleft", inset=c(0.15, 0) c("TBTWYSIWYG", "WYSIWYGTBT"), fill=c("lightblue","darkblue"))
legend("topleft", inset = c(0.15, 0) c("TBTWYSIWYG", "WYSIWYGTBT"), fill=c("lightblue","darkblue"))
legend("topleft", inset = c(0.15, 0), c("TBTWYSIWYG", "WYSIWYGTBT"), fill=c("lightblue","darkblue"))
barplot(nice$x, names.arg = nice$Group.1, col = c("lightblue", "lightblue", "darkblue", "darkblue"))
legend("topleft", inset = c(0.15, 0), c("TBTWYSIWYG", "WYSIWYGTBT"), fill=c("lightblue","darkblue"))
barplot(nice$x, names.arg = nice$Group.1, col = c("lightblue", "lightblue", "darkblue", "darkblue"))
legend("topleft", inset = c(0.05, 0), c("TBTWYSIWYG", "WYSIWYGTBT"), fill=c("lightblue","darkblue"))
plot(data$gameid, data$game_length)
data <- read.csv("lengths.csv", sep=";")
str(data)
plot(data$gameid, data$game_length)
wt <- data[data$experiment_type == 'TBTWYSIWYG' & data$game_length < 500000 & data$Interface_used == "WYSIWYG", ]
head(wt)
data <- data[data$game_length < 1000000, ]
nice <- aggregate(data$game_length, by=list(data$Interface_used, data$experiment_type), FUN=mean)
nice
barplot(nice$x, names.arg = nice$Group.1, col = c("lightblue", "lightblue", "darkblue", "darkblue"))
legend("topleft", inset = c(0.05, 0), c("TBTWYSIWYG", "WYSIWYGTBT"), fill=c("lightblue","darkblue"))
nice2 <- aggregate(data$game_length, by=list(data$Interface_used), FUN=mean)
nice2
nice2 <- aggregate(data$game_length, by=list(data$Interface_used), FUN=mean)
nice2
barplot(nice2$x, names.arg = nice$Group.1, ylab="Average time per game in milliseconds" ,col = c("lightblue", "darkblue"))
barplot(nice2$x, names.arg = nice2$Group.1, ylab="Average time per game in milliseconds" ,col = c("lightblue", "darkblue"))
barplot(nice2$x, names.arg = nice2$Group.1, ylab="Average time per game in milliseconds" ,col = c("lightblue", "darkblue"), ylim=c(0, 300000))
barplot(nice$x, main="Average gametimes", names.arg = nice$Group.1, ylab="Average time per game in milliseconds" ,col = c("lightblue", "lightblue", "darkblue", "darkblue"))
legend("topleft", inset = c(0.05, 0), c("TBTWYSIWYG", "WYSIWYGTBT"), fill=c("lightblue","darkblue"))
barplot(nice2$x, main="Average gametime per interface", names.arg = nice2$Group.1, ylab="Average time per game in milliseconds" ,col = c("lightblue", "darkblue"), ylim=c(0, 300000))
plot(data$gameid, data$game_length)
barplot(nice2$x, main="Average gametime per interface", names.arg = nice2$Group.1, ylab="Average time per game in milliseconds" ,col = c("lightblue", "darkblue"), ylim=c(0, 300000))
barplot(nice$x, main="Average gametimes", names.arg = nice$Group.1, ylab="Average time per game in milliseconds" ,col = c("lightblue", "lightblue", "darkblue", "darkblue"))
legend("topleft", inset = c(0.05, 0), c("TBTWYSIWYG", "WYSIWYGTBT"), fill=c("lightblue","darkblue"))
data <- data[data$game_length < 500000, ]
nice <- aggregate(data$game_length, by=list(data$Interface_used, data$experiment_type), FUN=mean)
nice
nice2 <- aggregate(data$game_length, by=list(data$Interface_used), FUN=mean)
nice2
barplot(nice2$x, main="Average gametime per interface", names.arg = nice2$Group.1, ylab="Average time per game in milliseconds" ,col = c("lightblue", "darkblue"), ylim=c(0, 300000))
barplot(nice$x, main="Average gametimes", names.arg = nice$Group.1, ylab="Average time per game in milliseconds" ,col = c("lightblue", "lightblue", "darkblue", "darkblue"))
data <- data[data$game_length < 500000, ]
barplot(nice$x, main="Average gametimes", names.arg = nice$Group.1, ylab="Average time per game in milliseconds" ,col = c("lightblue", "lightblue", "darkblue", "darkblue"), ylim=c(0, 300000))
barplot(nice$x, main="Average gametimes", names.arg = nice$Group.1, ylab="Average time per game in milliseconds" ,col = c("lightblue", "lightblue", "darkblue", "darkblue"), ylim=c(0, 250000))
legend("topleft", inset = c(0.05, 0), c("TBTWYSIWYG", "WYSIWYGTBT"), fill=c("lightblue","darkblue"))
barplot(nice2$x, main="Average gametime per interface", names.arg = nice2$Group.1, ylab="Average time per game in milliseconds" ,col = c("lightblue", "darkblue"), ylim=c(0, 300000))
barplot(nice2$x, main="Average gametime per interface", names.arg = nice2$Group.1, ylab="Average time per game in milliseconds" ,col = c("lightblue", "darkblue"), ylim=c(0, 250000))
barplot(nice2$x, main="Average gametime per interface", names.arg = nice2$Group.1, ylab="Average time per game in milliseconds" ,col = c("lightblue", "darkblue"), ylim=c(0, 250000))
